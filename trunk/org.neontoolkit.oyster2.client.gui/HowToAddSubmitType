1. In PropertiesConfiguredSubmitDialog.properties
	add an identifier to the line  (use a comma to separate the new value):
		configuration.identifiers = submitOntology, newidentifier
		
	add a line with the identifier plus the suffix ".file" and the
	name of a file in /resources as value, like in
		submitOntology.file = SubmitOntology.properties
		
		
2. Add a file with the name specified in the previous file, and
	containing the following fields:
	
	adapter.file is the filename of the configuration file of an
		adapter used to build the axis object. See point #3 below.
		
	bundle.file is the filename of a i18n bundle. This file should be in
	the same package as the PropertiesConfiguredSubmitDialog class.
	
	namespace is the namespace of the instances used to load predefined values from
	omv. It's stripped from the instance names when showing them to the user.
	
	target.categories categories to group the attributes of the class. If there are not
	really categories, just put a "general_categories" value
	
	for each category, a key with the same name and the suffix ".category.attributes"
	is used to assign properties to a category. If there's only the general_categories
	stub, assign all properties to it.
	
	for each class property, there are some attributes to specify. Let "attribute" be
	the property name:
		- attribute.type is the type of composite shown to the user to ask for
			input data. They are listed in org.neontoolkit.oyster2.client.gui.dialogs.content.CompositeFactory
			with the suffix "_TYPE" as static members. Required.
		- attribute.required specifies if the attribute must be filled. Required.
		- attribute.predefined specifies if there are predefined values to be
			shown to the user.
		- attribute.source.type is used when there are predefined values (so it's optional).
			It can take the values "ontology", "booleans", and "file".
			When "ontology", the "attribute.class" key is associated with the class
			whose instances are the predefined values.
			When "file", a properties file is specified with the key "attribute.source".
			See the example of resources/ontologyStatus.properties
		- attribute.editable specifies if the user will be able to put it's own
			values or he will have to choose between the predefined. It should
			be specified always, at least when using predefined values.
			
			
3. Add a file with the name specified in the previous file under the key "adapter.file" in
	the resources directory, with the following entries:
		"attributes" holds the list of attributes of the type. Please use the same names
		as in the previous file.
		"class" holds the name of the class generated by Axis2 to hold the information
		to be serialized in the SOAP message.
		"identifier" specifies how to build the identifier of the object. literals are
		enclosed by ". If two property values are to be put together, put a space between
		them to separate both names, and it will be ignored when building the identifier.
		
		Let "attribute" be the name of a property. For each one, there will be
		the following keys:
			- attribute.setter  name of the method of the axis class used to set the
			attribute associated with the property named "attribute".
			- attribute.setter.argument.class class of the single argument of the setter
			method.
			
4. Add the templates
	in the file TemplateManager.properties, add a file name to the key "template.files".
	Let the file name specified be "templateObject.properties" for this example.
	
	Add another entry "templateObject.properties.id" and assign the value used
	as identifier in #1.
	
	Add the template file in the resources directory.
	
5. Add a value to SubmitMessages.properties bundle with the id used in #|
	as key.	